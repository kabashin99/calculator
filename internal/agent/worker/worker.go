package worker

import (
	//"context"
	"calculator_app/config"
	agentClient "calculator_app/internal/agent/client"
	"calculator_app/internal/orchestrator/models"
	"errors"
	"fmt"
	"log"
	"time"
)

type Worker struct {
	client agentClient.OrchestratorClient
	config *config.Config
}

func NewWorker(client agentClient.OrchestratorClient, config *config.Config) *Worker {
	return &Worker{
		client: client,
		config: config,
	}
}

func (w *Worker) StartWorker() {
	for {
		log.Println("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∑–∞–¥–∞—á—É —É –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
		task, err := w.client.FetchTask()
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %v", err)
			time.Sleep(2 * time.Second)
			continue
		}

		if task == nil {
			log.Println("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á. –û–∂–∏–¥–∞—é...")
			time.Sleep(1 * time.Second)
			continue
		}

		log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞–¥–∞—á–∞: %s %s %s", task.Arg1, task.Operation, task.Arg2)

		result, err := w.executeTask(task)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %v", err)
			continue
		}

		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %f", result)
		if err := w.client.SendResult(task.ID, result); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: %v", err)
		} else {
			log.Println("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
		}
	}
}

func StartWorkers(client agentClient.OrchestratorClient, config *config.Config, numWorkers int) {
	for i := 0; i < numWorkers; i++ {
		worker := NewWorker(client, config)
		go worker.StartWorker()
	}
}

func (w *Worker) executeTask(task *models.TaskResponse) (float64, error) {
	if task.Operation == "" {
		log.Printf("Task %s has empty operation", task.ID)
		return 0, errors.New("task has empty operation")
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —á–∏—Å–ª–∞, –µ—Å–ª–∏ –æ–Ω–∏ —è–≤–ª—è—é—Ç—Å—è ID –∑–∞–¥–∞—á
	arg1, err := parseOperand(task.Arg1)
	if err != nil {
		return 0, fmt.Errorf("invalid arg1: %v", err)
	}

	arg2, err := parseOperand(task.Arg2)
	if err != nil {
		return 0, fmt.Errorf("invalid arg2: %v", err)
	}

	// –ò–º–∏—Ç–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
	opTime := w.getOperationTime(task.Operation)
	time.Sleep(opTime)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
	switch task.Operation {
	case "+":
		return arg1 + arg2, nil
	case "-":
		return arg1 - arg2, nil
	case "*":
		return arg1 * arg2, nil
	case "/":
		if arg2 == 0 {
			return 0, errors.New("division by zero")
		}
		return arg1 / arg2, nil
	default:
		return 0, errors.New("unknown operation")
	}
}

func parseOperand(val interface{}) (float64, error) {
	switch v := val.(type) {
	case float64:
		return v, nil
	case int:
		return float64(v), nil
	case string:
		// –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–¥–∞—á–∏ –ø–æ ID
		return 0, errors.New("task dependencies not implemented")
	default:
		return 0, fmt.Errorf("unsupported type: %T", val)
	}
}

func (w *Worker) getOperationTime(operation string) time.Duration {
	switch operation {
	case "+":
		return w.config.AddTime
	case "-":
		return w.config.SubTime
	case "*":
		return w.config.MulTime
	case "/":
		return w.config.DivTime
	default:
		return 1 * time.Second
	}
}

func (w *Worker) resolveOperand(operand interface{}) (float64, error) {
	switch v := operand.(type) {
	case float64:
		return v, nil // –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º

	case string:
		// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ UUID –∑–∞–¥–∞—á–∏, –æ–∂–∏–¥–∞–µ–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
		log.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ %s...", v)
		for {
			task, err := w.client.GetTask(v)
			if err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ %s: %v", v, err)
				time.Sleep(1 * time.Second)
				continue
			}

			if task.Status == "done" {
				log.Printf("‚úÖ –ó–∞–¥–∞—á–∞ %s –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %f", v, task.Result)
				return task.Result, nil
			}

			if task.Status == "error" {
				return 0, errors.New("–∑–∞–≤–∏—Å–∏–º–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
			}

			time.Sleep(1 * time.Second) // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
		}

	default:
		return 0, fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞–Ω–¥–∞: %T", operand)
	}
}
